
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id
  password      String
  name          String
  isAdmin       Boolean? @default(false)
  isPasswordSet Boolean? @default(false)
  
  groups    UserGroupMap[]
}

model Group {
  id        String @id
  name      String
  
  users       UserGroupMap[]
  permissions RepositoryPermissionMap[]
}

model UserGroupMap {
  id        Int @id @default(autoincrement())
  userId    String
  groupId   String
  
  user      User  @relation(fields: [userId],  references: [id])
  group     Group @relation(fields: [groupId], references: [id])
}

model Device {
  id Int @id @default(autoincrement())
  name String
  model String?
  rawFilePath String
  modifiedReason String?
  repositoryId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  repository Repository? @relation(fields: [repositoryId], references: [id])
}


model Repository {
  id        Int @id @default(autoincrement())
  name      String
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  device      Device[]
  permissions RepositoryPermissionMap[]

  parent    Repository?  @relation("RepositoryToRepository", fields: [parentId], references: [id])
  children  Repository[] @relation("RepositoryToRepository")
}


model RepositoryPermissionMap {
  id            Int @id @default(autoincrement())
  repositoryId  Int
  groupId       String
  permission    String

  repository Repository @relation(fields: [repositoryId], references: [id])
  group      Group      @relation(fields: [groupId],      references: [id])
}